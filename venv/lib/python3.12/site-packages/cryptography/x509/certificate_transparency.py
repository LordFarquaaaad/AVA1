# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.

<<<<<<< HEAD
from __future__ import annotations

from cryptography import utils
from cryptography.hazmat.bindings._rust import x509 as rust_x509


class LogEntryType(utils.Enum):
=======
from __future__ import absolute_import, division, print_function

import abc
from enum import Enum

import six


class LogEntryType(Enum):
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
    X509_CERTIFICATE = 0
    PRE_CERTIFICATE = 1


<<<<<<< HEAD
class Version(utils.Enum):
    v1 = 0


class SignatureAlgorithm(utils.Enum):
    """
    Signature algorithms that are valid for SCTs.

    These are exactly the same as SignatureAlgorithm in RFC 5246 (TLS 1.2).

    See: <https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.4.1>
    """

    ANONYMOUS = 0
    RSA = 1
    DSA = 2
    ECDSA = 3


SignedCertificateTimestamp = rust_x509.Sct
=======
class Version(Enum):
    v1 = 0


@six.add_metaclass(abc.ABCMeta)
class SignedCertificateTimestamp(object):
    @abc.abstractproperty
    def version(self):
        """
        Returns the SCT version.
        """

    @abc.abstractproperty
    def log_id(self):
        """
        Returns an identifier indicating which log this SCT is for.
        """

    @abc.abstractproperty
    def timestamp(self):
        """
        Returns the timestamp for this SCT.
        """

    @abc.abstractproperty
    def entry_type(self):
        """
        Returns whether this is an SCT for a certificate or pre-certificate.
        """
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
