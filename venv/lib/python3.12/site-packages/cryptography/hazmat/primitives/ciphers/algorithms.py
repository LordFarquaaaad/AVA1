# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.

<<<<<<< HEAD
from __future__ import annotations

from cryptography import utils
from cryptography.hazmat.decrepit.ciphers.algorithms import (
    ARC4 as ARC4,
)
from cryptography.hazmat.decrepit.ciphers.algorithms import (
    CAST5 as CAST5,
)
from cryptography.hazmat.decrepit.ciphers.algorithms import (
    IDEA as IDEA,
)
from cryptography.hazmat.decrepit.ciphers.algorithms import (
    SEED as SEED,
)
from cryptography.hazmat.decrepit.ciphers.algorithms import (
    Blowfish as Blowfish,
)
from cryptography.hazmat.decrepit.ciphers.algorithms import (
    TripleDES as TripleDES,
)
from cryptography.hazmat.primitives._cipheralgorithm import _verify_key_size
=======
from __future__ import absolute_import, division, print_function

from cryptography import utils
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
from cryptography.hazmat.primitives.ciphers import (
    BlockCipherAlgorithm,
    CipherAlgorithm,
)
<<<<<<< HEAD


class AES(BlockCipherAlgorithm):
=======
from cryptography.hazmat.primitives.ciphers.modes import ModeWithNonce


def _verify_key_size(algorithm, key):
    # Verify that the key is instance of bytes
    utils._check_byteslike("key", key)

    # Verify that the key size matches the expected key size
    if len(key) * 8 not in algorithm.key_sizes:
        raise ValueError(
            "Invalid key size ({}) for {}.".format(
                len(key) * 8, algorithm.name
            )
        )
    return key


@utils.register_interface(BlockCipherAlgorithm)
@utils.register_interface(CipherAlgorithm)
class AES(object):
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
    name = "AES"
    block_size = 128
    # 512 added to support AES-256-XTS, which uses 512-bit keys
    key_sizes = frozenset([128, 192, 256, 512])

<<<<<<< HEAD
    def __init__(self, key: bytes):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self) -> int:
        return len(self.key) * 8


class AES128(BlockCipherAlgorithm):
    name = "AES"
    block_size = 128
    key_sizes = frozenset([128])
    key_size = 128

    def __init__(self, key: bytes):
        self.key = _verify_key_size(self, key)


class AES256(BlockCipherAlgorithm):
    name = "AES"
    block_size = 128
    key_sizes = frozenset([256])
    key_size = 256

    def __init__(self, key: bytes):
        self.key = _verify_key_size(self, key)


class Camellia(BlockCipherAlgorithm):
=======
    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(BlockCipherAlgorithm)
@utils.register_interface(CipherAlgorithm)
class Camellia(object):
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
    name = "camellia"
    block_size = 128
    key_sizes = frozenset([128, 192, 256])

<<<<<<< HEAD
    def __init__(self, key: bytes):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self) -> int:
        return len(self.key) * 8


utils.deprecated(
    ARC4,
    __name__,
    "ARC4 has been moved to "
    "cryptography.hazmat.decrepit.ciphers.algorithms.ARC4 and "
    "will be removed from "
    "cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.",
    utils.DeprecatedIn43,
    name="ARC4",
)


utils.deprecated(
    TripleDES,
    __name__,
    "TripleDES has been moved to "
    "cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and "
    "will be removed from "
    "cryptography.hazmat.primitives.ciphers.algorithms in 48.0.0.",
    utils.DeprecatedIn43,
    name="TripleDES",
)

utils.deprecated(
    Blowfish,
    __name__,
    "Blowfish has been moved to "
    "cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish and "
    "will be removed from "
    "cryptography.hazmat.primitives.ciphers.algorithms in 45.0.0.",
    utils.DeprecatedIn37,
    name="Blowfish",
)


utils.deprecated(
    CAST5,
    __name__,
    "CAST5 has been moved to "
    "cryptography.hazmat.decrepit.ciphers.algorithms.CAST5 and "
    "will be removed from "
    "cryptography.hazmat.primitives.ciphers.algorithms in 45.0.0.",
    utils.DeprecatedIn37,
    name="CAST5",
)


utils.deprecated(
    IDEA,
    __name__,
    "IDEA has been moved to "
    "cryptography.hazmat.decrepit.ciphers.algorithms.IDEA and "
    "will be removed from "
    "cryptography.hazmat.primitives.ciphers.algorithms in 45.0.0.",
    utils.DeprecatedIn37,
    name="IDEA",
)


utils.deprecated(
    SEED,
    __name__,
    "SEED has been moved to "
    "cryptography.hazmat.decrepit.ciphers.algorithms.SEED and "
    "will be removed from "
    "cryptography.hazmat.primitives.ciphers.algorithms in 45.0.0.",
    utils.DeprecatedIn37,
    name="SEED",
)


class ChaCha20(CipherAlgorithm):
    name = "ChaCha20"
    key_sizes = frozenset([256])

    def __init__(self, key: bytes, nonce: bytes):
=======
    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(BlockCipherAlgorithm)
@utils.register_interface(CipherAlgorithm)
class TripleDES(object):
    name = "3DES"
    block_size = 64
    key_sizes = frozenset([64, 128, 192])

    def __init__(self, key):
        if len(key) == 8:
            key += key + key
        elif len(key) == 16:
            key += key[:8]
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(BlockCipherAlgorithm)
@utils.register_interface(CipherAlgorithm)
class Blowfish(object):
    name = "Blowfish"
    block_size = 64
    key_sizes = frozenset(range(32, 449, 8))

    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(BlockCipherAlgorithm)
@utils.register_interface(CipherAlgorithm)
class CAST5(object):
    name = "CAST5"
    block_size = 64
    key_sizes = frozenset(range(40, 129, 8))

    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(CipherAlgorithm)
class ARC4(object):
    name = "RC4"
    key_sizes = frozenset([40, 56, 64, 80, 128, 160, 192, 256])

    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(CipherAlgorithm)
class IDEA(object):
    name = "IDEA"
    block_size = 64
    key_sizes = frozenset([128])

    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(BlockCipherAlgorithm)
@utils.register_interface(CipherAlgorithm)
class SEED(object):
    name = "SEED"
    block_size = 128
    key_sizes = frozenset([128])

    def __init__(self, key):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self):
        return len(self.key) * 8


@utils.register_interface(CipherAlgorithm)
@utils.register_interface(ModeWithNonce)
class ChaCha20(object):
    name = "ChaCha20"
    key_sizes = frozenset([256])

    def __init__(self, key, nonce):
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
        self.key = _verify_key_size(self, key)
        utils._check_byteslike("nonce", nonce)

        if len(nonce) != 16:
            raise ValueError("nonce must be 128-bits (16 bytes)")

        self._nonce = nonce

<<<<<<< HEAD
    @property
    def nonce(self) -> bytes:
        return self._nonce

    @property
    def key_size(self) -> int:
        return len(self.key) * 8


class SM4(BlockCipherAlgorithm):
    name = "SM4"
    block_size = 128
    key_sizes = frozenset([128])

    def __init__(self, key: bytes):
        self.key = _verify_key_size(self, key)

    @property
    def key_size(self) -> int:
=======
    nonce = utils.read_only_property("_nonce")

    @property
    def key_size(self):
>>>>>>> 90f5ddd1 (Initial commit: Integrated Google Classroom API and report generation)
        return len(self.key) * 8
